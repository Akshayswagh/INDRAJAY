<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h1><%= title %></h1>
    <a href="/admin/trusted-buyers" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left me-1"></i> Back to List
    </a>
  </div>

  <% if (typeof errors !== 'undefined' && Array.isArray(errors) && errors.length > 0) { %>
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
      <strong>Please correct the following errors:</strong>
      <ul>
        <% errors.forEach(function(error) { %>
          <li><%= error.msg || error %></li>
        <% }); %>
      </ul>
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  <% } %>

  <div class="card shadow-sm">
    <div class="card-body">
      <form
        action="/admin/api/trusted-buyers"
        method="POST"
        enctype="multipart/form-data"
        id="addTrustedBuyerForm"
        novalidate
      >

        <% 
          function getVal(fieldName, subField) {
            if (typeof formData === 'undefined') return '';
            if (subField && formData[fieldName] && typeof formData[fieldName] === 'object') {
              return formData[fieldName][subField] || '';
            }
            return formData[fieldName] || '';
          }

          function hasError(fieldName) {
            return typeof errors !== 'undefined' &&
              Array.isArray(errors) &&
              errors.some(function(e) { return e.param === fieldName; });
          }

          function getError(fieldName, defaultMsg) {
            if (!hasError(fieldName)) return defaultMsg;
            var error = errors.find(function(e) { return e.param === fieldName; });
            return error.msg || defaultMsg;
          }
        %>

        <!-- Customer and Company -->
        <div class="row">
          <div class="col-md-6 mb-3">
            <label for="customerName" class="form-label">Customer Name <span class="text-danger">*</span></label>
            <input
              type="text"
              class="form-control <%= hasError('customerName') ? 'is-invalid' : '' %>"
              id="customerName"
              name="customerName"
              value="<%= getVal('customerName') %>"
              required
            />
            <div class="invalid-feedback"><%= getError('customerName', 'Customer name is required.') %></div>
          </div>

          <div class="col-md-6 mb-3">
            <label for="companyName" class="form-label">Company Name <span class="text-danger">*</span></label>
            <input
              type="text"
              class="form-control <%= hasError('companyName') ? 'is-invalid' : '' %>"
              id="companyName"
              name="companyName"
              value="<%= getVal('companyName') %>"
              required
            />
            <div class="invalid-feedback"><%= getError('companyName', 'Company name is required.') %></div>
          </div>
        </div>

        <!-- Email and Contact -->
        <div class="row">
          <div class="col-md-6 mb-3">
            <label for="email" class="form-label">Email <span class="text-danger">*</span></label>
            <input
              type="email"
              class="form-control <%= hasError('email') ? 'is-invalid' : '' %>"
              id="email"
              name="email"
              value="<%= getVal('email') %>"
              required
            />
            <div class="invalid-feedback"><%= getError('email', 'Valid email is required.') %></div>
          </div>

          <div class="col-md-6 mb-3">
            <label for="contactNumber" class="form-label">Contact Number <span class="text-danger">*</span></label>
            <input
              type="tel"
              class="form-control <%= hasError('contactNumber') ? 'is-invalid' : '' %>"
              id="contactNumber"
              name="contactNumber"
              value="<%= getVal('contactNumber') %>"
              required
            />
            <div class="invalid-feedback"><%= getError('contactNumber', 'Contact number is required.') %></div>
          </div>
        </div>

        <!-- Address -->
        <div class="mb-3">
          <label for="fullAddress" class="form-label">Full Address <span class="text-danger">*</span></label>
          <textarea
            class="form-control <%= hasError('fullAddress') ? 'is-invalid' : '' %>"
            id="fullAddress"
            name="fullAddress"
            rows="3"
            required
          ><%= getVal('address', 'fullAddress') || getVal('fullAddress') %></textarea>
          <div class="invalid-feedback"><%= getError('fullAddress', 'Address is required.') %></div>
        </div>

        <!-- GST and PAN -->
        <div class="row">
          <div class="col-md-6 mb-3">
            <label for="gstnNumber" class="form-label">GSTN No.</label>
            <input
              type="text"
              class="form-control <%= hasError('gstnNumber') ? 'is-invalid' : '' %>"
              id="gstnNumber"
              name="gstnNumber"
              value="<%= getVal('gstnNumber') %>"
              pattern="^[0-9A-Z]{15}$"
            />
            <div class="invalid-feedback"><%= getError('gstnNumber', 'Enter a valid 15-character GSTN.') %></div>
          </div>
          <div class="col-md-6 mb-3">
            <label for="panNumber" class="form-label">PAN No.</label>
            <input
              type="text"
              class="form-control <%= hasError('panNumber') ? 'is-invalid' : '' %>"
              id="panNumber"
              name="panNumber"
              value="<%= getVal('panNumber') %>"
              pattern="^[A-Z]{5}[0-9]{4}[A-Z]{1}$"
            />
            <div class="invalid-feedback"><%= getError('panNumber', 'Enter a valid 10-character PAN.') %></div>
          </div>
        </div>

        <!-- Bank Details PDF -->
        <div class="mb-3">
          <label for="bankDetailsPdf" class="form-label">
            Bank Details (PDF, max 2MB)
            <% if (typeof isBankPdfRequiredOnForm !== 'undefined' && isBankPdfRequiredOnForm) { %>
              <span class="text-danger">*</span>
            <% } %>
          </label>
          <input
            type="file"
            class="form-control <%= hasError('bankDetailsPdf') ? 'is-invalid' : '' %>"
            id="bankDetailsPdf"
            name="bankDetailsPdf"
            accept="application/pdf"
            <% if (typeof isBankPdfRequiredOnForm !== 'undefined' && isBankPdfRequiredOnForm) { %>required<% } %>
          />
          <div class="invalid-feedback" id="bankPdfFeedback">
            <%= getError('bankDetailsPdf', 'Please upload a valid PDF under 2MB.') %>
          </div>
        </div>

        <!-- Admin Notes -->
        <div class="mb-3">
          <label for="adminNotes" class="form-label">Admin Notes (Optional)</label>
          <textarea
            class="form-control"
            id="adminNotes"
            name="adminNotes"
            rows="3"
          ><%= getVal('adminNotes') %></textarea>
        </div>

        <!-- Submit Button -->
        <div class="d-grid">
          <button type="submit" class="btn btn-primary btn-lg" id="addBuyerSubmitBtn">
            <span class="spinner-border spinner-border-sm me-1" style="display: none"></span>
            <span class="button-text">Add Trusted Buyer</span>
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<%- include('../partials/admin_footer') %>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const form = document.getElementById("addTrustedBuyerForm");
    const submitButton = document.getElementById("addBuyerSubmitBtn");
    const bankPdfInput = document.getElementById("bankDetailsPdf");
    const bankPdfFeedback = document.getElementById("bankPdfFeedback");

    const isPdfRequiredFromServerString = "<%= (typeof isBankPdfRequiredOnForm !== 'undefined' && isBankPdfRequiredOnForm === true) ? 'true' : 'false' %>";
    const isPdfRequired = isPdfRequiredFromServerString === "true";

    if (form && submitButton) {
      const buttonText = submitButton.querySelector(".button-text");
      const spinner = submitButton.querySelector(".spinner-border");

      form.addEventListener("submit", function (event) {
        let isCustomPdfValidationValid = true;

        if (isPdfRequired || bankPdfInput.files.length > 0) {
          if (bankPdfInput.files.length === 0 && isPdfRequired) {
            bankPdfFeedback.textContent = "Bank Details PDF is required.";
            bankPdfInput.classList.add("is-invalid");
            isCustomPdfValidationValid = false;
          } else if (bankPdfInput.files.length > 0) {
            const file = bankPdfInput.files[0];
            if (file.type !== "application/pdf") {
              bankPdfFeedback.textContent = "Invalid file type. Only PDF is allowed.";
              bankPdfInput.classList.add("is-invalid");
              isCustomPdfValidationValid = false;
            } else if (file.size > 2 * 1024 * 1024) {
              bankPdfFeedback.textContent = "File is too large. Maximum size is 2MB.";
              bankPdfInput.classList.add("is-invalid");
              isCustomPdfValidationValid = false;
            } else {
              bankPdfInput.classList.remove("is-invalid");
            }
          }
        } else {
          bankPdfInput.classList.remove("is-invalid");
        }

        if (!form.checkValidity() || !isCustomPdfValidationValid) {
          event.preventDefault();
          event.stopPropagation();
          form.classList.add("was-validated");

          let firstErrorField = form.querySelector(".form-control.is-invalid, .form-select.is-invalid");
          if (!firstErrorField && !isCustomPdfValidationValid) {
            firstErrorField = bankPdfInput;
          } else if (!firstErrorField) {
            firstErrorField = form.querySelector(":invalid");
          }
          if (firstErrorField) firstErrorField.focus();
          return;
        }

        submitButton.disabled = true;
        if (buttonText) buttonText.textContent = "Adding...";
        if (spinner) spinner.style.display = "inline-block";
      });
    }

    if (bankPdfInput && bankPdfFeedback) {
      bankPdfInput.addEventListener("change", function () {
        this.classList.remove("is-invalid");
        bankPdfFeedback.textContent = "";
      });
    }
  });
</script>
