<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Reset Password</title>

    <style>
      :root {
        --primary: #f47321;
        --primary-hover: #e0661b;
        --text: #1f2937;
        --muted: #6b7280;
        --success: #10b981;
        --error: #ef4444;
        --border: #e5e7eb;
        --bg: #f9fafb;
        --white: #ffffff;
        --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      }

      body {
        background-color: var(--bg);
        color: var(--text);
        
        font-family: "Inter", -apple-system, BlinkMacSystemFont, sans-serif;
        margin: 0;
        padding: 0;
      }

      .container {
        max-width: 480px;
        width: 100%;
        margin: auto;
        padding: 2rem;
      }

      .card {
        background: var(--white);
        border-radius: 12px;
        box-shadow: var(--shadow);
        padding: 3rem;
        text-align: center;
      }

      .header {
        margin-bottom: 2.5rem;
      }

      .icon {
        width: 80px;
        height: 80px;
        margin: 0 auto 1.5rem;
        background-color: rgba(79, 70, 229, 0.05);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid rgba(79, 70, 229, 0.1);
      }

      .icon svg {
        width: 36px;
        height: 36px;
        color: var(--primary);
      }

      .title {
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 0.75rem;
        color: var(--text);
        letter-spacing: -0.025em;
      }

      .subtitle {
        color: var(--muted);
        font-size: 1rem;
        line-height: 1.5;
        margin-bottom: 1.5rem;
      }

      .form-group {
        margin-bottom: 1.75rem;
        text-align: left;
      }

      .input-wrapper {
        position: relative;
        margin-bottom: 0.25rem;
      }

      .input {
        width: 100%;
        padding: 1rem;
        border: 1px solid var(--border);
        border-radius: 8px;
        font-size: 1rem;
        transition: all 0.2s ease;
        background-color: transparent;
      }

      .input:focus {
        outline: none;
        border-color: var(--primary);
        box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
      }

      .label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--text);
      }

      .toggle {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        color: var(--muted);
        background: none;
        border: none;
        padding: 0;
      }

      .toggle:hover {
        color: var(--text);
      }

      .hint {
        display: block;
        font-size: 0.75rem;
        color: var(--muted);
        margin-top: 0.5rem;
      }

      .btn {
        width: 100%;
        padding: 1rem;
        background-color: var(--primary);
        color: var(--white);
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: background-color 0.2s ease;
      }

      .btn:hover {
        background-color: var(--primary-hover);
      }

      .btn:disabled {
        background-color: var(--muted);
        cursor: not-allowed;
      }

      .alert {
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1.5rem;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.75rem;
      }

      .alert-error {
        background-color: rgba(239, 68, 68, 0.05);
        color: var(--error);
        border: 1px solid rgba(239, 68, 68, 0.1);
      }

      .alert-success {
        background-color: rgba(16, 185, 129, 0.05);
        color: var(--success);
        border: 1px solid rgba(16, 185, 129, 0.1);
      }

      .loading {
        position: relative;
        pointer-events: none;
        color: transparent;
      }

      .loading::after {
        content: "";
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        width: 20px;
        height: 20px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: white;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        to {
          transform: translate(-50%, -50%) rotate(360deg);
        }
      }

      @media (max-width: 480px) {
        .container {
          padding: 1.5rem;
        }

        .card {
          padding: 2rem 1.5rem;
        }
      }
    </style>
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>

    <div class="container">
      <div class="card">
        <% if (valid) { %>
        <div class="header">
          <div class="icon">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
              <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
            </svg>
          </div>
          <h1 class="title">Set New Password</h1>
          <p class="subtitle">
            Create a strong, secure password to protect your account
          </p>
        </div>

        <form id="resetForm">
          <div class="form-group">
            <label for="password" class="label">New Password</label>
            <div class="input-wrapper">
              <input
                type="password"
                id="password"
                name="password"
                class="input"
                required
                minlength="8"
                pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$"
                title="Password must contain at least 8 characters, including uppercase, lowercase and number"
              />
              <button
                type="button"
                class="toggle"
                aria-label="Toggle password visibility"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                >
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
              </button>
            </div>
            <small class="hint"
              >Must be 8+ characters with uppercase, lowercase and number</small
            >
          </div>

          <button type="submit" class="btn" id="submitBtn">
            Reset Password
          </button>
        </form>

        <div
          id="responseMessage"
          class="alert"
          role="alert"
          style="display: none"
        ></div>
        <% } else { %>
        <div class="alert alert-error">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="12"></line>
            <line x1="12" y1="16" x2="12.01" y2="16"></line>
          </svg>
          Invalid or expired password reset link. Please request a new one.
        </div>
        <% } %>
      </div>
    </div>

    <% if (valid) { %>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Password toggle functionality
        const toggleBtn = document.querySelector(".toggle");
        const passwordInput = document.getElementById("password");

        if (toggleBtn && passwordInput) {
          toggleBtn.addEventListener("click", function () {
            const type =
              passwordInput.getAttribute("type") === "password"
                ? "text"
                : "password";
            passwordInput.setAttribute("type", type);

            // Toggle SVG icon
            const svg = this.querySelector("svg");
            if (type === "text") {
              svg.innerHTML = `
                <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path>
                <line x1="1" y1="1" x2="23" y2="23"></line>
              `;
            } else {
              svg.innerHTML = `
                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                <circle cx="12" cy="12" r="3"></circle>
              `;
            }
          });
        }

        // Form submission
        const form = document.getElementById("resetForm");
        const submitBtn = document.getElementById("submitBtn");
        const responseMsg = document.getElementById("responseMessage");

        form.addEventListener("submit", async (e) => {
          e.preventDefault();

          // Validate password pattern
          const password = form.password.value;
          const passwordPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$/;
          if (!passwordPattern.test(password)) {
            responseMsg.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              Password must contain at least 8 characters, including uppercase, lowercase and number
            `;
            responseMsg.className = "alert alert-error";
            responseMsg.style.display = "flex";
            return;
          }

          try {
            // Show loading state
            submitBtn.disabled = true;
            submitBtn.classList.add("loading");
            responseMsg.style.display = "none";

            const response = await fetch(
              `/api/auth/reset-password/<%= token %>`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  password: password,
                }),
              }
            );

            const data = await response.json();

            if (response.ok) {
              responseMsg.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                  <polyline points="22 4 12 14.01 9 11.01"></polyline>
                </svg>
                ${data.message || "Password reset successfully! Redirecting..."}
              `;
              responseMsg.className = "alert alert-success";
              responseMsg.style.display = "flex";

              setTimeout(() => {
                window.location.href = "/login-admin";
              }, 2000);
            } else {
              responseMsg.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="12" y1="8" x2="12" y2="12"></line>
                  <line x1="12" y1="16" x2="12.01" y2="16"></line>
                </svg>
                ${data.message || "Error resetting password. Please try again."}
              `;
              responseMsg.className = "alert alert-error";
              responseMsg.style.display = "flex";
            }
          } catch (error) {
            console.error("Error:", error);
            responseMsg.innerHTML = `
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
              Network error. Please check your connection and try again.
            `;
            responseMsg.className = "alert alert-error";
            responseMsg.style.display = "flex";
          } finally {
            submitBtn.disabled = false;
            submitBtn.classList.remove("loading");
          }
        });
      });
    </script>
    <% } %>
  </body>
</html>
